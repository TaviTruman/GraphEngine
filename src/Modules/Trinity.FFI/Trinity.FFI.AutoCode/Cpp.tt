<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
    Assembly ffi_asm   = typeof(FFIExportAttribute).Assembly;
    var export_methods = from type in ffi_asm.GetTypes()
                         select type.GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic) into method
                         from m in method
                         where m.GetCustomAttribute<FFIExportAttribute>() != null
                         select m;
#>

/***********************************

  Auto-generated from Cpp.tt

 ***********************************/

#pragma once
// The following ifdef block is the standard way of creating macros which make exporting 
// from a DLL simpler. All files within this DLL are compiled with the TRINITYFFINATIVE_EXPORTS
// symbol defined on the command line. This symbol should not be defined on any project
// that uses this DLL. This way any other project whose source files include this file see 
// TRINITYFFINATIVE_API functions as being imported from a DLL, whereas this DLL sees symbols
// defined with this macro as being exported.
#ifdef TRINITYFFINATIVE_EXPORTS
#include <cstdint>
#include <os/os.h>
#define TRINITYFFINATIVE_API extern "C" __declspec(dllexport)
#else
#define TRINITYFFINATIVE_API extern "C" __declspec(dllimport)
#endif
#include <TrinityErrorCode.h>

enum CellAccessOptions: int32_t
{
    ThrowExceptionOnCellNotFound = 1,
    ReturnNullOnCellNotFound = 2,
    CreateNewOnCellNotFound = 4,
    StrongLogAhead = 8,
    WeakLogAhead = 16
};

typedef char* (*TRINITY_FFI_SYNC_HANDLER)(char*);
typedef void  (*TRINITY_FFI_ASYNC_HANDLER)(char*);

<# 
	foreach(var m in export_methods)
	{#>
typedef <#=Helper.GenerateReturnTypeCpp(m)#> (*TRINITY_FFI_<#=Helper.GenerateName(m).ToUpper()#>)(<#=Helper.GenerateParameterListCpp(m)#>);
<#
	}#>

extern "C" struct TRINITY_INTERFACES
{
<# 
foreach(var m in export_methods)
	{#>
    TRINITY_FFI_<#=Helper.GenerateName(m).ToUpper()#> <#=Helper.GenerateName(m)#>;
<#
	}#>
};

TRINITYFFINATIVE_API TRINITY_INTERFACES* TRINITY_FFI_GET_INTERFACES();
